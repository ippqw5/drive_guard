<?xml version="1.0"?>
<robot name="racecar" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Gazebo references -->

  <gazebo reference="base_link">
    <mu1 value="0.0" />
    <mu2 value="0.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <material>Gazebo/Red</material>
  </gazebo>

  <gazebo reference="left_rear_wheel">
    <mu1 value="2.0" />
    <mu2 value="2.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <fdir1 value="1 0 0" />
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="right_rear_wheel">
    <mu1 value="2.0" />
    <mu2 value="2.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <fdir1 value="1 0 0" />
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="left_front_wheel">
    <mu1 value="2.0" />
    <mu2 value="2.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <fdir1 value="0 0 1" />
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="right_front_wheel">
    <mu1 value="2.0" />
    <mu2 value="2.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <fdir1 value="0 0 1" />
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="laser_link">
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="camera">
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="real_sense">
    <material>Gazebo/Grey</material>
  </gazebo>


  <!-- Gazebo Plugins -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/racecar</robotNamespace>
      <robotParam>robot_description</robotParam>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
      <legacyModeNS>true</legacyModeNS>
    </plugin>
  </gazebo>

  <gazebo reference="laser_link">
    <sensor name="laser_sensor" type="ray">
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>50</update_rate>
      <pose>0 0 0.2 0 0 0</pose>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1.000000</resolution>
            <min_angle>0.000000</min_angle>
            <max_angle>6.280000</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.5000</min>
          <max>10.5</max>
          <resolution>0.015000</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>

      <plugin name="laserscan" filename="libgazebo_ros_ray_sensor.so">
        <ros>

          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>laser_link</frame_name>
      </plugin>
    </sensor>
  </gazebo> 


  <!-- camera -->
  <gazebo reference="camera">
    <material>Gazebo/Grey</material>
    <sensor type="camera" name="camera">
      <update_rate>30.0</update_rate>
      <camera name="camera">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>rrbot/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="real_sense">
    <sensor type="depth" name="real_sense">
      <always_on>true</always_on>
      <update_rate>20.0</update_rate>
      <camera>
        <horizontal_fov>${60.0*3.14/180.0}</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>8.0</far>
        </clip>
      </camera>
      <plugin name="kinect_real_sense_controller" filename="libgazebo_ros_openni_kinect.so">
        <cameraName>real_sense</cameraName>
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <frameName>realsense_depth</frameName>
        <baseline>0.1</baseline>
        <distortion_k1>0.0</distortion_k1>
        <distortion_k2>0.0</distortion_k2>
        <distortion_k3>0.0</distortion_k3>
        <distortion_t1>0.0</distortion_t1>
        <distortion_t2>0.0</distortion_t2>
        <pointCloudCutoff>0.4</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="imu_link">
    <material>Gazebo/Orange</material>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
  </gazebo>

  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <pose>0 0 0 0 0 0</pose>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <gazebo>
    <plugin name="gazebo_ros_joint_state_publisher"
      filename="libgazebo_ros_joint_state_publisher.so">
      <update_rate>100</update_rate>
      <joint_name>left_front_wheel_joint</joint_name>
      <joint_name>right_front_wheel_joint</joint_name>
      <joint_name>left_rear_wheel_joint</joint_name>
      <joint_name>right_rear_wheel_joint</joint_name>
      <joint_name>left_steering_hinge_joint</joint_name>
      <joint_name>right_steering_hinge_joint</joint_name>
    </plugin>
  </gazebo>

    <!-- ACKERMANN DRIVE PLUGIN -->
    <gazebo>
      <plugin name='gazebo_ackermann_drive' filename='libgazebo_ros_ackermann_drive.so'>
        <ros>
          <!-- <namespace>ugv_gazebo_ackermann</namespace> -->
          <remapping>cmd_vel:=cmd_vel</remapping>
          <remapping>odom:=odom</remapping>
          <remapping>distance:=distance</remapping>
        </ros>
  
        <update_rate>100.0</update_rate>
  
        <!-- wheels -->
        <front_left_joint>left_front_wheel_joint</front_left_joint>
        <front_right_joint>right_front_wheel_joint</front_right_joint>
        <rear_left_joint>left_rear_wheel_joint</rear_left_joint>
        <rear_right_joint>right_rear_wheel_joint</rear_right_joint>
        <left_steering_joint>left_steering_hinge_joint</left_steering_joint>
        <right_steering_joint>right_steering_hinge_joint</right_steering_joint>
  
        <!-- Max absolute steer angle for tyre in radians-->
        <!-- Any cmd_vel angular z greater than this would be capped -->
        <max_steer>0.6</max_steer>
  
        <!-- Max absolute steering angle of steering wheel -->
        <max_steering_angle>1.570796</max_steering_angle>
  
        <!-- Max absolute linear speed in m/s -->
        <max_speed>5</max_speed>
  
        <!-- PID tuning -->
        <left_steering_pid_gain>1500 0 1</left_steering_pid_gain>
        <left_steering_i_range>0 0</left_steering_i_range>
        <right_steering_pid_gain>1500 0 1</right_steering_pid_gain>
        <right_steering_i_range>0 0</right_steering_i_range>
        <linear_velocity_pid_gain>1500 0 1</linear_velocity_pid_gain>
        <linear_velocity_i_range>0 0</linear_velocity_i_range>
  
        <!-- output -->
        <publish_odom>true</publish_odom>
        <publish_odom_tf>true</publish_odom_tf>     <!-- Don't pubslish this when using robot
              localization -->
        <publish_wheel_tf>false</publish_wheel_tf>  <!-- Don't publish this. It will override all
              wheel frames to robot_base_frame parameter below.-->
        <publish_distance>true</publish_distance>
  
        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_footprint</robot_base_frame>
  
      </plugin>
    </gazebo>

</robot>